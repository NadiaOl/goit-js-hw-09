{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAQgC,SAAvBC,EAAcC,EAAUC,GAEjC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACeC,KAAKC,SAAW,GAEtCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAfQO,SAASC,cAAc,SAE/BC,iBAAiB,UAkBD,SAACC,GAGQA,EAAtBC,iBAW6C,IARf,IAEbC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALZ,MAAOgB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAEvBC,EAAeC,OAAOJ,EAAMK,OAC1BC,EAAcF,OAAOH,EAAKI,OAC1BE,EAAgBH,OAAOF,EAAOG,OAG3BG,EAAI,EAAGA,GAAKD,EAAeC,GAAK,EAITzB,EAAhByB,EAAGL,GACdM,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE9D6B,OAAM,SAAAJ,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBJ,EAAA8B,OAAOI,QAAQ,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGrBkB,GAA3BG,EAEhBX,EAAMqB,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// получаем доступ к форме и везаем слушателя сабмит\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\n// создаем функцию для создания промиса\nfunction createPromise(position, delay) {\n\nreturn new Promise((resolve, reject) => {\n  setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n});\n}\n\n// создаем функцию сабмита\nfunction handleSubmit(event) {\n\n  // отменяем перезагрузку страницы\n  event.preventDefault();\n\n  // достаем введенные значения из полей формы\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n  let enteredDelay = Number(delay.value);\n  const enteredStep = Number(step.value);\n  const enteredAmount = Number(amount.value);\n\n  // запускаем цикл до тех пор пока кол-во запусков не станет равно enteredAmount\n  for (let i = 1; i <= enteredAmount; i += 1) {\n\n// при каждом запуске цикла вызываем функцию создания промиса\n// первая итерация с задержкой равной enteredDelay\n    createPromise(i, enteredDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    // увеличиваем задержку для последующих итераций на enteredStep\n    enteredDelay += enteredStep;\n    // обнуляем поля\n    event.target.reset();\n  }\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","enteredDelay","Number","value","enteredStep","enteredAmount","i","then","param","Notify","success","concat","catch","failure","target","reset"],"version":3,"file":"03-promises.2404af38.js.map"}